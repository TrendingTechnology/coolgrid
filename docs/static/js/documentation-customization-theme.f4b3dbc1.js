(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{"./documentation/customization/theme.mdx":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return p});var o=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/extends.js"),r=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),i=(t("./node_modules/react/index.js"),t("./node_modules/@mdx-js/react/dist/index.es.js")),a={},c="wrapper";function p(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)(c,Object(o.a)({},a,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"customize-theme"},"Customize theme"),Object(i.b)("h2",{id:"default-theme"},"Default theme"),Object(i.b)("p",null,"Below is how default grid theme looks like. It is ",Object(i.b)("em",{parentName:"p"},"important"),"\nto implement it into your provider under ",Object(i.b)("inlineCode",{parentName:"p"},"grid")," key."),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"{\n  baseSize: 16,\n  columns: 12,\n  breakpoints: {\n    xs: {\n      viewport: 0,\n      container: 0\n    },\n    sm: {\n      viewport: 576,\n      container: 540\n    },\n    md: {\n      viewport: 778,\n      container: 720\n    },\n    lg: {\n      viewport: 992,\n      container: 960\n    },\n    xl: {\n      viewport: 1200,\n      container: 1140\n    }\n  }\n}\n")),Object(i.b)("h2",{id:"create-your-own-theme"},"Create your own theme"),Object(i.b)("p",null,"You can change count of ",Object(i.b)("inlineCode",{parentName:"p"},"columns"),", or define your own ",Object(i.b)("inlineCode",{parentName:"p"},"breakpoints"),"."),Object(i.b)("h3",{id:"customized-breakpoints"},"Customized breakpoints"),Object(i.b)("p",null,"For the smallest screen, you must set viewport to ",Object(i.b)("inlineCode",{parentName:"p"},"0"),". For the other viewport\nproperties you can set ",Object(i.b)("inlineCode",{parentName:"p"},"viewport")," and ",Object(i.b)("inlineCode",{parentName:"p"},"container")," size in pixels (without unit).\nIf you set ",Object(i.b)("inlineCode",{parentName:"p"},"baseSize"),", your defined sizes od viewports will be recalculated\nto ",Object(i.b)("inlineCode",{parentName:"p"},"em")," units. If you do not specify baseSize, it will fallback to pixels."),Object(i.b)("p",null,"Below, you can see how to change count of columns:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"{\n  columns: 7,\n  // ...rest\n}\n")),Object(i.b)("p",null,"Below, you can see customized breakpoints."),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"{\n  breakpoints: {\n    phone: {\n      viewport: 320,\n      container: 300\n    },\n    tablet: {\n      viewport: 768,\n      container: 740\n    },\n    notebook: {\n      viewport: 1366,\n      container: 1200\n    }\n  }\n  // ...rest\n}\n")),Object(i.b)("p",null,"You can also use units in ",Object(i.b)("inlineCode",{parentName:"p"},"viewport")," or ",Object(i.b)("inlineCode",{parentName:"p"},"container")," key. When value\nis a number it fallbacks to ",Object(i.b)("inlineCode",{parentName:"p"},"px"),", or when baseSize is set it will\nbe calculated to ",Object(i.b)("inlineCode",{parentName:"p"},"em"),"s, for example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"{\n  breakpoints: {\n    phone: {\n      viewport: '320px',\n      container: '100%'\n    },\n    tablet: {\n      viewport: '768px',\n      container: 740\n    },\n    notebook: {\n      viewport: '1366px',\n      container: '1200px'\n    }\n  }\n  // ...rest\n}\n")),Object(i.b)("h3",{id:"override-settings-in-container"},"Override settings in Container"),Object(i.b)("p",null,"You can even override cofiguration for only one Container."),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"import { ThemeProvider } from 'styled-components'\nimport { Container, Row, Col, theme } from 'coolstyle\n\nconst breakpoints = {\n  phone: {\n    viewport: 320,\n    container: 300\n  },\n  tablet: {\n    viewport: 768,\n    container: 740\n  },\n  notebook: {\n    viewport: 1366,\n    container: 1200\n  }\n}\n\n<ThemeProvider theme={{ grid: theme }}>\n  <Container columns={7} breakpoints={breakpoints}>\n    <Row>...</Row>\n    <Row>...</Row>\n  </Container>\n</ThemeProvider>\n")),Object(i.b)("h3",{id:"override-settings-in-row"},"Override settings in Row"),Object(i.b)("p",null,"You can even override cofiguration for each Row separately."),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"import { ThemeProvider } from 'styled-components'\nimport { Container, Row, Col, theme } from 'coolstyle\n\nconst breakpoints = {\n  phone: {\n    viewport: 320,\n    container: 300\n  },\n  tablet: {\n    viewport: 768,\n    container: 740\n  },\n  notebook: {\n    viewport: 1366,\n    container: 1200\n  }\n}\n\n<ThemeProvider theme={{ grid: theme }}>\n  <Container>\n    <Row columns={7} breakpoints={breakpoints}>...</Row>\n    <Row columns={5} breakpoints={breakpoints}>...</Row>\n  </Container>\n</ThemeProvider>\n")),Object(i.b)("p",null,"or pass it via ",Object(i.b)("inlineCode",{parentName:"p"},"<ThemeProvider>"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"import { ThemeProvider } from 'styled-components'\nimport { Container, Row, Col, theme } from 'coolstyle\n\nconst breakpoints = {\n  phone: {\n    viewport: 320,\n    container: 300\n  },\n  tablet: {\n    viewport: 768,\n    container: 740\n  },\n  notebook: {\n    viewport: 1366,\n    container: 1200\n  }\n}\n\n<ThemeProvider theme={{ grid: theme }}>\n  <Container>\n    <ThemeProvider\n      theme={grid: {\n        breakpoints,\n        columns: 7,\n        baseSize: 16\n      }}\n    >\n      <Row columns={7} breakpoints={breakpoints}>...</Row>\n    </ThemeProvider>\n    <Row columns={5} breakpoints={breakpoints}>...</Row>\n  </Container>\n</ThemeProvider>\n")))}p&&p===Object(p)&&Object.isExtensible(p)&&Object.defineProperty(p,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"documentation/customization/theme.mdx"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=documentation-customization-theme.c7b8f333b489d8d41bf0.js.map